What is aws_ops_alphas (CN)
==============================================================================


Why this Project
------------------------------------------------------------------------------
在作者的职业生涯中, 做过大大小小一百多个生产级别的 AWS 项目, 里面包含了微服务, 存储, ETL, ML, 监控等各种项目. 在 AWS 的官方文档中, 用多个 AWS Account 来分别部署属于同一个 App 的不同环境是被推荐了很多次的最佳实践. 而对于 CI/CD 的工具, 用户可以有很多选择.

作者做过的这些项目在 Git Branch 策略, Multi-Environment 环境, CI/CD 工具的选择, Configuration Management 管理的方式上都不相同, 而最终想要达到的目的是一致的. 每次做新项目时, 为了适应这些不同的策略和选择, 都需要重新写很多 "胶水" 代码将业务逻辑和这些 DevOps 决策整合起来. 这些 "胶水" 代码的数量往往超过了项目本身. 这对微服务化非常不利的. 因为微服务就意味着会把大系统分拆成许多小项目, 而每个小项目都需要维护这些 "胶水" 代码, 这会导致大量的重复劳动.

所以作者希望用这个项目来将这种最佳实践抽象化, 将其封装为一个框架. 以便在 AWS 项目中能轻松的践行这一最佳实践. 在软件设计上, 作者特意的通过抽象来给用户提供多种选择, 并提供定制化扩展的能力, 并没有强制用户完完全全使用 AWS 官方推荐的最佳实践. 例如:

1. 官方推荐每个环境使用专属的 AWS Account, 此项目也支持使用同一个 AWS Account 来部署多个环境.
2. 官方推荐使用 AWS 原生的 CodeCommit, CodeBuild, CodePipeline 来作为 CI/CD 的工具. 而此项目通过抽象化使得用户可以使用任何市面上流行的 CI/CD 工具.
3. 官方推荐用某些特定的 Git branch 来作为 CI/CD 的触发器, 而用户可以通过扩展或自定义来自行决定有哪些特定的 Branch, 以及能自定义 CI 触发器.
4. 官方推荐使用 AWS CloudFormation 来部署 AWS 资源, 而此项目通过把一些常用的 "动作", 例如这里的 "部署 AWS 资源" 抽象化使得用户可以使用任何市面上流行的部署工具.

并且这个框架是高度模块化的, 每个模块都可以被单独使用, 也可以将所有模块组合起来使用. 其中包含:

1. Git Branch 策略
2. Multi-Environment 的数量
3. CI/CD 工具的选择
4. 项目本身的类型, 例如是纯 Python, 还是 Lambda, 还是 StepFunction, 还是 Glue 项目.


How to Use this Project
------------------------------------------------------------------------------
如果你要在你的 App 项目中使用这个框架, 你首先要决定你要使用哪些模块, 以及对这些模块根据自己的项目情况进行扩展. 每个模块都有一定的 Convention 约定, 你可以进行扩展, 但是必须尊周这一约定, 你不能天马行空的乱来. 每个模块的约定我们会在后续的文档中详细解释.